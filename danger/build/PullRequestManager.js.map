{"version":3,"file":"PullRequestManager.js","sourceRoot":"","sources":["../src/PullRequestManager.ts"],"names":[],"mappings":"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","sourcesContent":["import { GitHubPRDSL } from 'danger/distribution/dsl/GitHubDSL';\n\nimport { Octokit } from '@octokit/rest';\nimport { GithubApiWrapper } from './GithubApiWrapper';\nimport { getPackageChangelogRelativePath } from './Utils';\n\nexport enum ChangelogEntryType {\n  BUG_FIXES = 'bug-fix',\n  NEW_FEATURES = 'new-feature',\n  BREAKING_CHANGES = 'breaking-change',\n}\n\nexport const DEFAULT_ENTRY_TYPE = ChangelogEntryType.BUG_FIXES;\n\nexport type ChangelogEntry = {\n  type: ChangelogEntryType;\n  message: string;\n};\n\nexport const DEFAULT_CHANGELOG_ENTRY_KEY = 'default' as const;\n\nexport type ChangelogEntries = {\n  [DEFAULT_CHANGELOG_ENTRY_KEY]: ChangelogEntry;\n  [key: string]: ChangelogEntry;\n};\n\nexport type PullRequest = GitHubPRDSL | Octokit.PullsListResponseItem;\n\nconst dangerMessage = `Add missing changelog`;\nconst dangerTags = `[danger][bot]`;\n\nexport class PullRequestManager {\n  constructor(private pullRequest: PullRequest, private githubApi: GithubApiWrapper) {}\n\n  /**\n   * Get suggested changelog entries from PR provided in the constructor.\n   *\n   * If PR doesn't contais `# Changelog` section, this method returns:\n   * {\n   *   [DEFAULT_CHANGELOG_ENTRY_KEY]: <title of this pr without tags>\n   * }\n   * Otherwise, it tries to parse PR's body.\n   */\n  parseChangelogSuggestionFromDescription(): ChangelogEntries {\n    const changelogEntries = {\n      [DEFAULT_CHANGELOG_ENTRY_KEY]: {\n        type: DEFAULT_ENTRY_TYPE,\n        message: this.pullRequest.title.replace(/\\[.*\\]/, '').trim(),\n      },\n    };\n\n    const changelogTag = this.pullRequest.body\n      .match(/#\\schangelog(([^#]*?)\\s?)*/i)?.[0]\n      ?.replace(/^-/, '');\n    if (changelogTag) {\n      changelogTag\n        .split('\\n')\n        .slice(1)\n        .map(line => line.trim())\n        .filter(line => line.length > 0)\n        .forEach(line => {\n          const tags = this.parseTagsFromLine(line);\n          if (!tags) {\n            warn(`Couldn't parse line: ${line}.`);\n            return;\n          }\n\n          changelogEntries[tags.packageName] = {\n            type: tags.type,\n            message: line.replace(/\\[.*\\]/, '').trim(),\n          };\n        });\n    }\n\n    return changelogEntries;\n  }\n\n  async createOrUpdateRPAsync(\n    missingEntries: { packageName: string; content: string }[]\n  ): Promise<PullRequest | null> {\n    const dangerHeadRef = `@danger/add-missing-changelog-to-${this.pullRequest.number}`;\n    const dangerBaseRef = this.pullRequest.head.ref;\n\n    const fileMap = missingEntries.reduce(\n      (prev, current) => ({\n        ...prev,\n        [getPackageChangelogRelativePath(current.packageName)]: current.content,\n      }),\n      {}\n    );\n\n    await this.githubApi.createOrUpdateBranchFromFileMap(fileMap, {\n      baseBranchName: dangerBaseRef,\n      branchName: dangerHeadRef,\n      message: `${dangerTags} ${dangerMessage}`,\n    });\n\n    const prs = await this.githubApi.getOpenPRs({\n      fromBranch: dangerHeadRef,\n      toBranch: dangerBaseRef,\n    });\n\n    if (prs.length > 1) {\n      warn(\"Couldn't find the correct pull request. Too many open ones.\");\n      return null;\n    }\n\n    if (prs.length === 1) {\n      return prs[0];\n    }\n\n    return this.githubApi.openPR({\n      fromBranch: dangerHeadRef,\n      toBranch: dangerBaseRef,\n      title: `${dangerTags} ${dangerMessage} to #${this.pullRequest.number}`,\n      body: `${dangerMessage} to #${this.pullRequest.number}`,\n    });\n  }\n\n  private parseTagsFromLine(\n    line: string\n  ): { packageName: string | typeof DEFAULT_CHANGELOG_ENTRY_KEY; type: ChangelogEntryType } | null {\n    const result: {\n      packageName: string | typeof DEFAULT_CHANGELOG_ENTRY_KEY;\n      type: ChangelogEntryType;\n    } = {\n      type: DEFAULT_ENTRY_TYPE,\n      packageName: DEFAULT_CHANGELOG_ENTRY_KEY,\n    };\n\n    const tags = line.match(/\\[[^\\]]*\\]/g);\n    if (!tags) {\n      return result;\n    }\n    // We currently support only two tags - packageName and type.\n    if (tags.length > 2) {\n      return null;\n    }\n\n    for (const tag of tags) {\n      switch (true) {\n        case /\\[[\\s-_]*(bug)?[\\s-_]*fix[\\s-_]*\\]/i.test(tag):\n          result.type = ChangelogEntryType.BUG_FIXES;\n          break;\n        case /\\[[\\s-_]*(new)?[\\s-_]*feature(s)?[\\s-_]*\\]/i.test(tag):\n          result.type = ChangelogEntryType.NEW_FEATURES;\n          break;\n        case /\\[[\\s-_]*breaking[\\s-_]*(change)?[\\s-_]*\\]/i.test(tag):\n          result.type = ChangelogEntryType.BREAKING_CHANGES;\n          break;\n        default:\n          result['packageName'] = tag.replace(/\\[|\\]/g, '').trim();\n      }\n    }\n\n    return result;\n  }\n}\n\nexport function createPullRequestManager(api: Octokit, pr: PullRequest): PullRequestManager {\n  return new PullRequestManager(\n    pr,\n    new GithubApiWrapper(api, pr.base.user.login, pr.base.repo.name)\n  );\n}\n"]}